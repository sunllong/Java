//String类扩展功能实现
public class Strings {

    public static void main(String[] args) {
        //测试
        System.out.println( repeat( 'a', 5 ) );
        System.out.println( fillBefore( "bcd", 'A', 5 ) );
        System.out.println( fillAfter( "bcd", 'A', 5 ) );
        System.out.println( removeAll( "aa-bb-cc-dd", "-" ) );
        System.out.println( reverse( "abcd" ) );
    }


    /**
     * 重复某个字符
     * <p>
     * 例如：
     * 'a' 5   => "aaaaa"
     * 'a' -1  => ""
     *
     * @param c     被重复的字符
     * @param count 重复的数目，如果小于等于0则返回""
     * @return 重复字符字符串
     */
    public static String repeat(char c, int count) {
        StringBuilder sb = new StringBuilder();
        if (count <= 0) {
            return "";
        }
        for (int i = 0; i < count; i++) {
            sb.append( c );
        }
        return sb.toString();
    }


    /**
     * 将已有字符串填充为规定长度，如果已有字符串超过这个长度则返回这个字符串
     * 字符填充于字符串前
     * <p>
     * 例如：
     * "abc" 'A' 5  => "AAabc"
     * "abc" 'A' 3  => "abc"
     *
     * @param str        被填充的字符串
     * @param filledChar 填充的字符
     * @param len        填充长度
     * @return 填充后的字符串
     */
    public static String fillBefore(String str, char filledChar, int len) {
        StringBuilder sb = new StringBuilder( str );
        if (str.length() >= len) {
            return str;
        } else {
            for (int i = 0; i < len - str.length(); i++) {
                sb.insert( 0, filledChar );
            }
        }


        return sb.toString();
    }

    /**
     * 将已有字符串填充为规定长度，如果已有字符串超过这个长度则返回这个字符串<br>
     * 字符填充于字符串后
     * 例如：
     * "abc" 'A' 5  => "abcAA"
     * "abc" 'A' 3  => "abc"
     *
     * @param str        被填充的字符串
     * @param filledChar 填充的字符
     * @param len        填充长度
     * @return 填充后的字符串
     */
    public static String fillAfter(String str, char filledChar, int len) {
        StringBuilder sb = new StringBuilder( str );
        if (str.length() >= len) {
            return str;
        } else {
            for (int i = 0; i < len - str.length(); i++) {
                sb.insert( str.length(), filledChar );
            }
        }


        return sb.toString();
    }

    /**
     * 移除字符串中所有给定字符串
     * 例：removeAll("aa-bb-cc-dd", "-") => aabbccdd
     *
     * @param str         字符串
     * @param strToRemove 被移除的字符串
     * @return 移除后的字符串
     */
    public static String removeAll(CharSequence str, CharSequence strToRemove) {
        String string = (String) str;
        String newStr = string.replace( strToRemove, "" );
        return newStr;
    }

    /**
     * 反转字符串
     * 例如：abcd => dcba
     *
     * @param str 被反转的字符串
     * @return 反转后的字符串
     */
    public static String reverse(String str) {
        if (str == null) {
            return str;
        }
        StringBuilder sb = new StringBuilder();
        for (int length = str.length() - 1; length >= 0; length--) {
            char c = str.charAt( length );
            sb.append( c );
        }
        return sb.toString();
    }
}
