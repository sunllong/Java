package com.sunlong.singleton;

import java.util.concurrent.atomic.AtomicReference;

/**
 * @Auther: SolarL
 * @Date: 2019/3/21
 * @Description: com.sunlong.singleton
 * @version: 1.0
 */
//懒汉式（线程不安全）
public class Singleton {
    private static Singleton singleton;

    Singleton() {
    }

    public static Singleton getSingleton() {
        if (singleton == null) {
            singleton = new Singleton();
        }
        return singleton;
    }
}

//2. 懒汉式（线程安全，同步方法，不推荐使用)
class Singleton1 {
    private static Singleton1 singleton;

    private Singleton1() {
    }

    public static synchronized Singleton1 getSingleton() {
        if (singleton == null) {
            singleton = new Singleton1();
        }
        return singleton;
    }
}

//3. 饿汉式（线程安全）
class Singleton2 {
    private static Singleton2 singleton = new Singleton2();

    private Singleton2() {
    }

    public static Singleton2 getSingleton() {
        return singleton;
    }
}

//4.饿汉式（静态代码块）
class Singleton4 {
    private static Singleton4 singleton;

    private Singleton4() {
    }

    static {
        singleton = new Singleton4();
    }

    public static Singleton4 getSingleton() {
        return singleton;
    }
}

// 5. 静态内部类加载（线程安全,推荐用）
class Singleton3 {
    private static Singleton3 singleton;

    private Singleton3() {

    }

    private static class SingletonInner {
        private static final Singleton3 instance = new Singleton3();
    }

    public static Singleton3 getSingleton() {
        return SingletonInner.instance;
    }
}

//6.枚举方法
enum Singleton5 {
    INSTANCE;

    public void method() {
    }
}

//调用
class Text {
    public static void main(String[] args) {
        Singleton5.INSTANCE.method();
    }
}

//*7.  懒汉式同步代码块法（通常线程安全，不可保证完全安全）
class Singleton6 {
    private static Singleton6 singleton;

    private Singleton6() {
    }

    public static Singleton6 getSingleton() {
        if (singleton == null) {
            synchronized (Singleton6.class) {
                if (singleton == null) {
                    singleton = new Singleton6();
                }
            }
        }
        return singleton;
    }
}

//*8.  懒汉式双重检查终极版（推荐)
class Singleton7 {
    private static volatile Singleton7 singleton;

    private Singleton7() {
    }

    public static Singleton7 getSingleton() {
        if (singleton == null) {
            synchronized (Singleton7.class) {
                if (singleton == null) {
                    singleton = new Singleton7();
                }
            }
        }
        return singleton;
    }
}

//9. 使用 ThreadLocal 实现（线程安全）
class Singleton8 {
    private static final ThreadLocal<Singleton8> singleton = new
            ThreadLocal<Singleton8>() {
                @Override
                protected Singleton8 initialValue() {
                    return new Singleton8();
                }
            };

    private Singleton8() {
    }

    public static Singleton8 getSingleton() {
        return singleton.get();
    }
}

/**
 * 更加优美的Singleton, 线程安全的
 */
class Singleton9 {
    /**
     * 利用AtomicReference
     */
    private static final AtomicReference<Singleton9> INSTANCE = new AtomicReference<>();

    /**
     * 私有化
     */
    private Singleton9() {
    }

    /**
     * 用CAS确保线程安全
     */
    public static final Singleton9 getInstance() {
        for (; ; ) {
            Singleton9 current = INSTANCE.get();
            if (current != null) {
                return current;
            }
            current = new Singleton9();
            if (INSTANCE.compareAndSet( null, current )) {
                return current;
            }
        }
    }

    public static void main(String[] args) {
        Singleton9 singleton1 = Singleton9.getInstance();
        Singleton9 singleton2 = Singleton9.getInstance();
        System.out.println( singleton1 == singleton2 );
    }
}
